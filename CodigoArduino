#include <WiFi.h>
#include <PubSubClient.h>

// Wifi and MQTT server
const char* ssid = ""; //RED WIFI
const char* password = ""; //CONTRASEÑA DE RED
const char* mqtt_server = ""; //DIRECCION DEL BROKER MQTT
const char* topic = "alerta"; //TOPICO PARA CLASIFICARLO EN EL BROKER

//FZ0430 Ajuste de sensor corriente
float Sensitivity = 0.100;

//WiFi y MQTT cliente
WiFiClient espClient;
PubSubClient mqttClient(espClient);

unsigned long lastMessageTime = 0; // Stores the time of the last message
const unsigned long minDelay = 12000; // Minimum delay in milliseconds (12 seconds)

void setup() {
  Serial.begin(115200);
  delay(1000);

//Connexion WiFi
  connectToWiFi();

//MQTT cliente
  mqttClient.setServer(mqtt_server, 1883); //1883
  mqttClient.setCallback(callback);  // Set callback function for incoming messages
}

void loop() {
//Chequeo y reconexion en caso de ser necesario
  if (!mqttClient.connected()) {
    reconnect();
  }

//Lectura valor sensor corriente
  float voltajeSensor = analogRead(A0) * (5.0 / 1023.0);
  float corriente = (voltajeSensor - 2.5) / Sensitivity;

//Tiempo de ultimo mensaje y envio
  if (corriente > -10.000 && millis() - lastMessageTime >= minDelay) {
    Serial.println("¡Corriente detectada!");
    Serial.print("Alerta en: X Ubicacion");

    char msg[50];
    snprintf(msg, sizeof(msg), "Alerta en: X Ubicacion");
    mqttClient.publish(topic, msg);  // Publish message to MQTT topic

    lastMessageTime = millis(); // Update last message time
  }

  mqttClient.loop();  // Process MQTT events
}

//Funcion conexion a wifi
void connectToWiFi() {
  delay(1000);

  Serial.println();
  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("Connected to WiFi!");
  Serial.println("IP address:");
  Serial.println(WiFi.localIP());
}

//Funcion de reconexion al mqtt
void reconnect() {
  // Loop until reconnected
  while (!mqttClient.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (mqttClient.connect(clientId.c_str())) {
      Serial.println("connected");
      // Subscribe to the topic
      mqttClient.subscribe(topic);
    } else {
      Serial.print("failed, rc=");
      Serial.print(mqttClient.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

//Función de devolución de llamada para mensajes MQTT entrantes
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}
